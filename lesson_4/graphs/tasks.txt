Графы

1. Определите 3 класса: Вершина (Node), Ребро (Edge) и Граф (Graph)
Класс вершины должен содержать в себе ключ этой вершины и иметь методы получения связей - с какими вершинами связана эта вершина
Класс Ребро должен иметь поле вес и иметь метод получения вершин, которые это ребро связывает
Класс Граф дожен содержать в себе набор вершин, иметь возможность добавлять и удалять вершины, добавлять и удалять ребра между вершинами. Также он должен реализовывать возможность проверки вхождения вершины в граф и возможностьитерирования по вершинам
2. Реализуйте метод поиска кратчайшего пути из вершины A в вершину B в классе Граф. Лучше всего использовать алгоритм Дейкстры - https://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%94%D0%B5%D0%B9%D0%BA%D1%81%D1%82%D1%80%D1%8B
3. Создайте новый класс на основе Node - CityNode, который расширит базовый новым полем name, которое будет содержать имя города. Также можно добавить поля с достопримечательностями и т.п.
4. Определите класс TransporationEdge на основе Edge, который будет поле направления и два типа весов: время маршрута (travel time) и стоимость (cost). Также добавьте поле с небольшим описанием средства транпортировки (поезд, самолет, машина и т.д.)
5. Создайте следующий граф городов (city_graph.png):
Hamburg -> Cologne on train (100 EUR, 240 min)
Hamburg -> Cologne on plane (150 EUR, 30 min)
Munich -> Cologne on plane (150 EUR, 40 min)
Berlin -> Munich on plane (200 EUR, 40 min)
Berlin -> Hamburg on train (50 EUR, 100 min)
Berlin -> Hamburg on plane (120 EUR, 50 min)
6. Определите новый алгорит поиска для нахождения самого дешевого и самого быстрого пути между гоородами.
7. Найдите самый дешевый и самый быстрый пути между городами Berline и Cologne
8. (!Optionnal) Определите алгоритм нахождения самого оптимального по стоимости и времени пути между городами и найдите этот путь между Berline и Cologne.